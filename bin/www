#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('necrobot-reader:server');
var http = require('http');
var https = require('https');
var dotenv = require('dotenv').config()
var fs = require('fs')
/**
 * Get port from environment and store in Express.
 */

//var port = normalizePort(process.env.PORT || '3000');

app.set('ip', process.env.IP)
app.set('host', process.env.HOST)
if (process.env.SECURE > 0) {
  var port = normalizePort(443)
  app.set('protocol', "https")
  app.set('port', port);
  options = {
    key: fs.readFileSync('/etc/letsencrypt/live/get.some.pizza/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/get.some.pizza/fullchain.pem'),
  }
} else {
  var port = normalizePort(80)
  app.set('protocol', "http")
  app.set('port', 80);
  options = {}
}

/**
 * Create HTTP server.
 */

var server = ""

if (process.env.SECURE > 0) {
  server = https.createServer(options, app);
} else {
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, process.env.IP);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}